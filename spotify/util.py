from .models import SpotifyToken
from django.utils import timezone
from datetime import timedelta
from requests import post, put, get
from pathlib import Path
import os
import json
from dotenv import load_dotenv
load_dotenv()

SPOTIPY_CLIENT_ID = os.getenv("SPOTIPY_CLIENT_ID")
SPOTIPY_CLIENT_SECRET = os.getenv("SPOTIPY_CLIENT_SECRET")

SPOTIFY_BASE_URL = 'https://accounts.spotify.com'

BASE_URL = "https://api.spotify.com/v1/"

def get_user_tokens(session_id):
    user_tokens = SpotifyToken.objects.filter(user=session_id)
    if user_tokens.exists():
        return user_tokens[0]
    return None

def update_or_create_user_tokens(session_id, access_token, token_type, expires_in, refresh_token):
    tokens = get_user_tokens(session_id)
    expires_in = timezone.now() + timedelta(seconds=expires_in)

    if tokens:
        # Use the existing refresh token if none is provided
        if refresh_token is None:
            refresh_token = tokens.refresh_token

        tokens.access_token = access_token
        tokens.refresh_token = refresh_token
        tokens.expires_in = expires_in
        tokens.token_type = token_type
        tokens.save(update_fields=['access_token', 'refresh_token', 'expires_in', 'token_type'])
    else:
        # Only create if we actually have a refresh token, or allow null in model
        tokens = SpotifyToken(
            user=session_id,
            access_token=access_token,
            refresh_token=refresh_token,  # Can still be None, so your model must allow null
            expires_in=expires_in,
            token_type=token_type
        )
        tokens.save()

    
       
def is_spotify_authenticated(session_id):
    tokens = get_user_tokens(session_id=session_id)
    if tokens:
        expiry = tokens.expires_in
        if expiry <= timezone.now():
            refresh_spotify_token(session_id=session_id)
        return True
            
    return False

def refresh_spotify_token(session_id):
    tokens = get_user_tokens(session_id=session_id)
    refresh_token = tokens.refresh_token
    
    response = post(f'{SPOTIFY_BASE_URL}/api/token', data= {
        'grant_type': 'refresh_token',
        'refresh_token': refresh_token,
        'client_id': SPOTIPY_CLIENT_ID,
        'client_secret': SPOTIPY_CLIENT_SECRET
    }).json()
    
    access_token = response.get('access_token')
    token_type = response.get('token_type')
    refresh_token = response.get('refresh_token')
    expires_in = response.get('expires_in')

    update_or_create_user_tokens(session_id, access_token=access_token, token_type=token_type, refresh_token=refresh_token, expires_in=expires_in)
   
def execute_spotify_api_request(session_id, endpoint, post_=False, put_=False, body=None):
    tokens = get_user_tokens(session_id)
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + tokens.access_token
    }

    url = BASE_URL + endpoint

    if post_:
        response = post(url, headers=headers, data=json.dumps(body) if body else None)
    elif put_:
        response = put(url, headers=headers, data=json.dumps(body) if body else None)
    else:
        response = get(url, headers=headers)

    try:
        return response.json()
    except Exception as e:
        print(f"Error decoding JSON: {e}")
        return {'Error': 'Issue with request'}
    
def get_spotify_user_id(session_id):
    data = execute_spotify_api_request(session_id, "me")
    return data.get("id")

def create_playlist(session_id, name, public=False, description="Generated by app"):
    user_id = get_spotify_user_id(session_id)
    body = {
        "name": name,
        "description": description,
        "public": public
    }
    endpoint = f"users/{user_id}/playlists"
    result = execute_spotify_api_request(session_id, endpoint, post_=True, body=body)
    return result.get("id"), result.get("external_urls", {}).get("spotify")

def search_track_id(session_id, track_name, artist):
    if track_name is None:
        raise ValueError("Track was None. Query must have a track.")
    if artist is None:
        raise ValueError("Artist was None. Query must have an artist.")

    # Use Spotify's advanced search syntax
    query = f'track:"{track_name}" artist:"{artist}"'
    endpoint = f'search?q={query}&type=track&limit=5'
    result = execute_spotify_api_request(session_id, endpoint)

    tracks = result.get("tracks", {}).get("items", [])
    artist_lower = artist.lower()

    for track in tracks:
        artist_match = any(artist_lower == a['name'].lower() for a in track['artists'])

        if artist_match:
            return track['id']

    # No good match found
    return None

def add_tracks_to_playlist(session_id, playlist_id, track_ids):
    endpoint = f"playlists/{playlist_id}/tracks"
    body = {
        "uris": [f"spotify:track:{tid}" for tid in track_ids]
    }
    return execute_spotify_api_request(session_id, endpoint, post_=True, body=body)

def create_spotify_playlist_from_songs(session_id, playlist_name, songs_and_artists):
    track_ids = []
    missing_tracks = []

    for song_title, artist_name in songs_and_artists:
        track_id = search_track_id(session_id, song_title, artist_name)
        if track_id:
            track_ids.append(track_id)
        else:
            missing_tracks.append(f"- {song_title} by {artist_name}")

    playlist_id, playlist_url = create_playlist(session_id, playlist_name)
    if not playlist_id:
        return {"error": "Failed to create playlist"}

    add_result = add_tracks_to_playlist(session_id, playlist_id, track_ids)
    
    return playlist_url, missing_tracks, add_result


